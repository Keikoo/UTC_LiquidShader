/** Copyright 2023, Universal Tool Compiler */

#include "/Engine/Public/Platform.ush"
int RTargetSize;

Texture2D<float4> RefTexture;
RWTexture2D<float4> OutputTexture;

bool CheckHittedNormal(float3 NormalDirection)
{
	float3 PixelDirection = float3(1,0,0);
	float HitAngle = acos( dot(NormalDirection, PixelDirection)  / length(NormalDirection) * length(PixelDirection) ) * (180 / 3.14159265359);
	
	if(HitAngle < 90)
		return false;

	return true;
}

bool CheckIfHitNormal(uint2 ThreadId)
{
	if (RefTexture[ThreadId].x != 0 || RefTexture[ThreadId].y != 0 || RefTexture[ThreadId].z != 0)
		return true;
	
	return false;
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainCS(uint3 ThreadId : SV_DispatchThreadID)
{
	int ThreadIdX = ThreadId.x;
	
	if(CheckIfHitNormal(ThreadId.xy))
	{
		OutputTexture[ThreadId.xy] = float4(1,1,1,1);
		
		if(CheckHittedNormal(RefTexture[ThreadId.xy].xyz) && !CheckIfHitNormal(uint2(ThreadIdX + 1, ThreadId.y)))
		{
			for (int i = 1; i < RTargetSize - ThreadIdX; i++)
			{
				bool bClear = true;

				for (int i = 1; i <= RTargetSize - ThreadIdX - 1; i++)
				{
					const uint2 PixelPosition = uint2(ThreadIdX + i, ThreadId.y);

					if (CheckIfHitNormal(PixelPosition))
					{
						bClear = false;
						break;
					}

					OutputTexture[PixelPosition] = float4(1, 1, 1, 1);
				}

				if (bClear)
				{
					for (int i = 1; i <= RTargetSize - ThreadIdX - 1; i++)
					{
						const uint2 PixelPosition = uint2(ThreadIdX + i, ThreadId.y);

						OutputTexture[PixelPosition] = float4(0, 0, 0, 0);
					}
				}
			}
		}
	}
}